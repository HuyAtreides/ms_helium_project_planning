buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.flywaydb:flyway-database-postgresql:10.10.0'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.flywaydb.flyway" version "10.17.2"
    id "com.avast.gradle.docker-compose" version "0.17.8"
}

group = 'app.helium'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

flyway {
    url = 'jdbc:postgresql://localhost:5430/helium'
    user = 'ms_project_planning'
    locations = ['classpath:/db.migration']
    driver = 'org.postgresql.Driver'
    schemas = ['project_planning']
    password = 'ms_project_planning_password'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    /*implementation 'com.okta.spring:okta-spring-boot-starter:3.0.7'*/
    implementation 'org.springframework.kafka:spring-kafka'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation group: 'com.google.guava', name: 'guava', version: '33.2.1-jre'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.5.Final'
}

test {
    useJUnitPlatform()
}

tasks.register("componentTest", Test) {
    dependsOn(tasks.composeUp)

    finalizedBy(tasks.composeDown)
}

dockerCompose {
    useComposeFiles = ['./src/docker/docker-compose.yml']
    environment.put("SERVICES_HOST", "0.0.0.0")
}

bootRun {
    args += ["--spring.profiles.active=dev"]
}
